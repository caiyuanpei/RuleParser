/* Generated By:JJTree: Do not edit this line. ASTOperatorExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.cathysoft.ruleparser.jjt;

public class ASTOperatorExpression extends SimpleNode {
	
	public enum OperatorType {PATH, FUNCTION, INTEGER, STRING}
	
	private OperatorType opType;
	
	private ASTPath path;
	
	private ASTFunctionExpression function;
	
	private Integer integer;
	
	private String string;
	
	public ASTOperatorExpression(int id) {
		super(id);
	}

	public ASTOperatorExpression(Parser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(ParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public OperatorType getOpType() {
		return opType;
	}

	public void setOpType(OperatorType opType) {
		this.opType = opType;
	}

	public ASTPath getPath() {
		return path;
	}

	public void setPath(ASTPath path) {
		this.path = path;
	}

	public ASTFunctionExpression getFunction() {
		return function;
	}

	public void setFunction(ASTFunctionExpression function) {
		this.function = function;
	}

	public Integer getInteger() {
		return integer;
	}

	public void setInteger(Integer integer) {
		this.integer = integer;
	}

	public String getString() {
		return string;
	}

	public void setString(String string) {
		this.string = string;
	}
}
/*
 * JavaCC - OriginalChecksum=c9304d0a40fc7b664b6eddff39ba0b6c (do not edit this
 * line)
 */
