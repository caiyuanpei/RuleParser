/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  STATIC = false;
  MULTI = true;
  DEBUG_PARSER = true;
  VISITOR = true;}PARSER_BEGIN(Parser)package com.cathysoft.ruleparser.jjt;

import java.io.*;

public class Parser{  public static void main(String args [])  {    InputStream is = ClassLoader.getSystemResourceAsStream("example1.txt");    Parser parser = new Parser(is);    try    {		ASTExpression root = parser.parse();
		root.dump(" >");
		    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Parser)
ASTExpression parse() #Expression : {}
{
  < RULE >
  "("
  ContextClasses()
  ")"
  < LBRACKETS >
  ( LOOKAHEAD(2)
    "<" < NOT_EMPTY > ">"
    NotEmptyExp()  )?
  ( LOOKAHEAD(2)
    "<" < CHECK > ">"
    (
      CheckExp()    )+  )?
  < RBRACKETS >  {
    return jjtThis;  }}

void ContextClasses() :{}
{
  SignatureExp()
  (
	","
    SignatureExp()  )*}

void NotEmptyExp() :
{}
{
  < ALL > < BUT >
  
  PathExp()
  (
    ","
    PathExp()
  )*
| PathExp()
  (
    ","
     PathExp()
  )*}

void CheckExp() #void:
{}
{
   AssertionExp()
|  DerivationExp()}

void AssertionExp() :{}{
  < ASSERT >
  "("
  	PathExp()
  	","
  	< STRING_LITERAL >
  ")"
  LogicalExp()}

void DerivationExp() :{}{
  < DERIVATION >
  "("
  	PathExp()
  	","
  	< STRING_LITERAL >
  ")"
  DerivationBody()}

void LogicalExp() :{}
{LOOKAHEAD(2)
  LogicalBody()
| FunctionExp()}

void LogicalBody() :{}{
  (
    OperatorExp()
    < LOGIC_OPER >
    OperatorExp()
  )}

void DerivationBody() :{}
{
  LogicalExp()
  < DERIVATION_OPER >
  LogicalExp()}

void OperatorExp() :
{
}
{ LOOKAHEAD(2)
  PathExp()
| FunctionExp()
| < INTEGER_LITERAL >
| < STRING_LITERAL >
}

void FunctionExp() #Function :{}{ 
  < IDENTIFIER >
  "("
  Arguments()
  ")"}

void Arguments() :{}{
  (
    < INTEGER_LITERAL >
  | < STRING_LITERAL >
  | PathExp()
  )
  (
    ","
    (      < INTEGER_LITERAL >
    | < STRING_LITERAL >
    | PathExp()
    )
  )*}

void PathExp() #Path :
{
}
{
  < IDENTIFIER >  < DOT >
  < IDENTIFIER >
}

void SignatureExp() #Signature :{
}
{
  < IDENTIFIER >
  (
    < DOT >
    < IDENTIFIER >
  )*
}
SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

TOKEN [IGNORE_CASE] : /* KEYWORDS */
{
  < RULE : "RULE" >
| < NOT_EMPTY : "NOT EMPTY" >
| < ALL : "ALL" >
| < BUT : "BUT" >
| < CHECK : "CHECK" >
| < ASSERT : "ASSERT" >
| < DERIVATION : "DERIVATION" >}
TOKEN : /* OPERATOR */
{
  < LOGIC_OPER : "=" | ">" | "<" | ">=" | "<=" | "<>" >
| < DERIVATION_OPER : "->" >
| < DOT : "." >
| < LBRACKETS : "{" >
| < RBRACKETS : "}" >
| < QUOTE : "\"" >
}
TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}
TOKEN : /* STRING LETERALS */
{
  < STRING_LITERAL:
      < QUOTE >
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      < QUOTE >
  >}

