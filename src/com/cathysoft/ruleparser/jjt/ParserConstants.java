/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package com.cathysoft.ruleparser.jjt;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int RULE = 12;
  /** RegularExpression Id. */
  int NOT = 13;
  /** RegularExpression Id. */
  int EMPTY = 14;
  /** RegularExpression Id. */
  int ALL = 15;
  /** RegularExpression Id. */
  int BUT = 16;
  /** RegularExpression Id. */
  int CHECK = 17;
  /** RegularExpression Id. */
  int ASSERT = 18;
  /** RegularExpression Id. */
  int DERIVATION = 19;
  /** RegularExpression Id. */
  int LEFT = 20;
  /** RegularExpression Id. */
  int RIGHT = 21;
  /** RegularExpression Id. */
  int MID = 22;
  /** RegularExpression Id. */
  int SIZE = 23;
  /** RegularExpression Id. */
  int LOGIC_OPER = 24;
  /** RegularExpression Id. */
  int DERIVATION_OPER = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int LBRACKETS = 27;
  /** RegularExpression Id. */
  int RBRACKETS = 28;
  /** RegularExpression Id. */
  int QUOTE = 29;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 30;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 31;
  /** RegularExpression Id. */
  int HEX_LITERAL = 32;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 33;
  /** RegularExpression Id. */
  int IDENTIFIER = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int DIGIT = 36;
  /** RegularExpression Id. */
  int STRING_LITERAL = 37;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"(\"",
    "\")\"",
    "\"<\"",
    "\">\"",
    "\",\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"RULE\"",
    "\"NOT\"",
    "\"EMPTY\"",
    "\"ALL\"",
    "\"BUT\"",
    "\"CHECK\"",
    "\"ASSERT\"",
    "\"DERIVATION\"",
    "\"LEFT\"",
    "\"RIGHT\"",
    "\"MID\"",
    "\"SIZE\"",
    "<LOGIC_OPER>",
    "\"->\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"\\\"\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING_LITERAL>",
  };

}
