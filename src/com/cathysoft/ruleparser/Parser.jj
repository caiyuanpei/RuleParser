/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  STATIC = false;
               }PARSER_BEGIN(Parser)package com.cathysoft.ruleparser;

import java.io.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/  public static void main(String args [])  {    InputStream is = ClassLoader.getSystemResourceAsStream("com/cathysoft/ruleparser/example1.txt");    Parser parser = new Parser(is);    try    {		ASTExpressionRoot root = parser.parse();
		root.dump(" >");
		    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Parser)
ASTExpressionRoot parse()                 : {/*@bgen(jjtree) ExpressionRoot */
  ASTExpressionRoot jjtn000 = new ASTExpressionRoot(JJTEXPRESSIONROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionRoot */
  try {
/*@egen*/
  < RULE >
  "("
  ClassList()
  ")"
  < LBRACKETS >
  ( LOOKAHEAD(2)
    "<" < NOT > < EMPTY > ">"
    NotEmptyExpression()  )?
  ( LOOKAHEAD(2)
    "<" < CHECK > ">"
    (
      CheckExpression()    )+  )?
  < RBRACKETS >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ClassList() :{/*@bgen(jjtree) ClassList */
  ASTClassList jjtn000 = new ASTClassList(JJTCLASSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassList */
  try {
/*@egen*/
  < IDENTIFIER >
  (
    < DOT >
    < IDENTIFIER >  )*
  (
	","
    < IDENTIFIER >
	(
	  < DOT >
	  < IDENTIFIER >
	)*  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void NotEmptyExpression() :
{/*@bgen(jjtree) NotEmptyExpression */
  ASTNotEmptyExpression jjtn000 = new ASTNotEmptyExpression(JJTNOTEMPTYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotEmptyExpression */
  try {
/*@egen*/
  < ALL > < BUT > <IDENTIFIER> ("," < IDENTIFIER >)*
| <IDENTIFIER> ("," < IDENTIFIER >)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void CheckExpression() :
{/*@bgen(jjtree) CheckExpression */
  ASTCheckExpression jjtn000 = new ASTCheckExpression(JJTCHECKEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CheckExpression */
  try {
/*@egen*/
  < ASSERT > < STRING_LITERAL >
| < DERIVATION > < STRING_LITERAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

TOKEN [IGNORE_CASE] : /* KEYWORDS */
{
  < RULE : "RULE" >
| < NOT : "NOT" >
| < EMPTY : "EMPTY" >
| < ALL : "ALL" >
| < BUT : "BUT" >
| < CHECK : "CHECK" >
| < ASSERT : "ASSERT" >
| < DERIVATION : "DERIVATION" >
| < LEFT : "LEFT" >
| < RIGHT : "RIGHT" >
| < MID : "MID" >
| < SIZE : "SIZE" >}
TOKEN : /* OPERATOR */
{
  < LOGIC_OPER : "=" | ">" | "<" | ">=" | "<=" | "<>" >
| < DERIVATION_OPER : "->" >
| < DOT : "." >
| < LBRACKETS : "{" >
| < RBRACKETS : "}" >
| < QUOTE : "\"" >
}
TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}
TOKEN : /* STRING LETERALS */
{
  < STRING_LITERAL:
      < QUOTE >
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      < QUOTE >
  >}

